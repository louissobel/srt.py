
1
00:00:01,200 --> 00:00:04,200
ERIC GRIMSON: So now we've seen arithmetic expressions.

2
00:00:04,200 --> 00:00:05,480
We've seen giving names to those.

3
00:00:05,480 --> 00:00:08,500
We've seen how we can combine those together using names and

4
00:00:08,500 --> 00:00:10,180
places where we would use values.

5
00:00:10,180 --> 00:00:12,790
We can start doing some simple computations.

6
00:00:12,790 --> 00:00:16,680
But those are all dealing with scalar objects, numbers.

7
00:00:16,680 --> 00:00:19,100
Let's talk briefly about other kinds of objects.

8
00:00:19,100 --> 00:00:21,190
We'll come back to them later on, but we want to see what we

9
00:00:21,190 --> 00:00:22,340
can do here.

10
00:00:22,340 --> 00:00:25,560
So non-scalar objects are compound things, things whose

11
00:00:25,560 --> 00:00:28,280
proportions or components we can get at.

12
00:00:28,280 --> 00:00:31,080
We'll see a lot of these throughout the course of this

13
00:00:31,080 --> 00:00:34,030
subject, but the simplest one to start with are what are

14
00:00:34,030 --> 00:00:36,340
called strings, or objects that have a

15
00:00:36,340 --> 00:00:38,120
type str for string.

16
00:00:38,120 --> 00:00:41,910
And these are literally just sequences of characters that

17
00:00:41,910 --> 00:00:44,350
are all concatenated together.

18
00:00:44,350 --> 00:00:45,940
So how do we write them?

19
00:00:45,940 --> 00:00:48,580
Well literals of this type can be written either by putting

20
00:00:48,580 --> 00:00:51,280
them inside of a single quote or putting them inside of

21
00:00:51,280 --> 00:00:52,600
double quotes.

22
00:00:52,600 --> 00:00:57,320
And so if I go to my Python shell, for example, we can see

23
00:00:57,320 --> 00:01:01,170
that we can put things within a single quote.

24
00:01:01,170 --> 00:01:03,950
And that gives us that string back.

25
00:01:03,950 --> 00:01:08,080
By the way, we can give names to those things.

26
00:01:08,080 --> 00:01:12,410
So we can say, what's the value of foo, and, in fact, we

27
00:01:12,410 --> 00:01:15,660
can look at the type and we'll see that it gives us back

28
00:01:15,660 --> 00:01:18,540
something of type string or str.

29
00:01:18,540 --> 00:01:21,070
We can now similarly put things inside of double

30
00:01:21,070 --> 00:01:26,540
quotes, which is convenient, for example, if we want to put

31
00:01:26,540 --> 00:01:29,900
things with gaps or spaces in between them.

32
00:01:29,900 --> 00:01:33,100
And, by the way, we can also put quotes around numbers.

33
00:01:33,100 --> 00:01:36,250
So this is a string.

34
00:01:36,250 --> 00:01:40,400
And just to see that, let's ask for the type of that.

35
00:01:40,400 --> 00:01:43,630
The type of that sequence of characters, numeral one,

36
00:01:43,630 --> 00:01:45,210
numeral two, numeral three, inside of the

37
00:01:45,210 --> 00:01:47,370
double quotes is a string.

38
00:01:47,370 --> 00:01:51,520
And that is different than the type of the number itself

39
00:01:51,520 --> 00:01:53,390
which is in int.

40
00:01:53,390 --> 00:01:56,160
So we can put together strings.

41
00:01:56,160 --> 00:01:58,800
If we can put them together we'd like to be able to do

42
00:01:58,800 --> 00:01:59,190
things with them.

43
00:01:59,190 --> 00:02:01,770
And I want to show you some examples of those.

44
00:02:01,770 --> 00:02:06,640
So we can provide different operations on strings.

45
00:02:06,640 --> 00:02:08,240
Now some of these maybe a little surprising.

46
00:02:08,240 --> 00:02:09,100
So let's walk through them.

47
00:02:09,100 --> 00:02:15,060
The first one is we can ask for taking the string a and

48
00:02:15,060 --> 00:02:16,480
multiplying it by the number three.

49
00:02:16,480 --> 00:02:18,120
And that may sound strange.

50
00:02:18,120 --> 00:02:21,010
But what it gives us is a string with three copies of

51
00:02:21,010 --> 00:02:23,040
a's stuck together.

52
00:02:23,040 --> 00:02:26,380
Or, if you like, I could do it with a slightly more

53
00:02:26,380 --> 00:02:28,110
complicated string.

54
00:02:28,110 --> 00:02:31,530
And it literally is just concatenating or copying those

55
00:02:31,530 --> 00:02:33,680
versions of those strings together.

56
00:02:33,680 --> 00:02:39,570
We can put two strings together using addition to

57
00:02:39,570 --> 00:02:42,800
give us this concatenated string of a and b.

58
00:02:42,800 --> 00:02:47,160
And we can, of course, also concatenate the other strings

59
00:02:47,160 --> 00:02:48,590
if we want to make sure that they are

60
00:02:48,590 --> 00:02:49,620
converted into strings.

61
00:02:49,620 --> 00:02:52,350
So we can take a number, convert it to a string and

62
00:02:52,350 --> 00:02:57,160
concatenate that together gives us the string a123.

63
00:02:57,160 --> 00:03:00,620
These are just different ways of dealing with strings and

64
00:03:00,620 --> 00:03:01,690
putting them together.

65
00:03:01,690 --> 00:03:04,150
It seems a little odd that we're using operators that

66
00:03:04,150 --> 00:03:05,880
don't normally deal with numbers.

67
00:03:05,880 --> 00:03:08,560
And this is an instance of what we call operator

68
00:03:08,560 --> 00:03:09,810
overloading.

69
00:03:11,860 --> 00:03:19,330
In which what we are doing here, here, here, is we are

70
00:03:19,330 --> 00:03:21,830
using the same operator to do different things.

71
00:03:21,830 --> 00:03:24,610
If we give them numbers it'll do one thing.

72
00:03:24,610 --> 00:03:27,230
If we give them a number and a string in the case of

73
00:03:27,230 --> 00:03:28,860
multiplication it will do something different.

74
00:03:28,860 --> 00:03:31,390
If we give them two strings it will do something different.

75
00:03:31,390 --> 00:03:34,890
So we're letting the operator use the type of the object to

76
00:03:34,890 --> 00:03:37,340
decide what the right operation is to do.

77
00:03:37,340 --> 00:03:40,220
The last one we show here is that given we say we now have

78
00:03:40,220 --> 00:03:43,600
a non-scalar object we need to know how many portions are

79
00:03:43,600 --> 00:03:44,460
there inside of it.

80
00:03:44,460 --> 00:03:47,070
And for that there's a built-in Python function

81
00:03:47,070 --> 00:03:48,840
called len for length.

82
00:03:48,840 --> 00:03:55,150
And if I want to ask for the length of a particular string

83
00:03:55,150 --> 00:03:57,900
it gives me back that answer.

84
00:03:57,900 --> 00:04:01,960
So I now have compound objects that I can do things with.

85
00:04:01,960 --> 00:04:03,850
Well obviously one of the things I'd like to do is not

86
00:04:03,850 --> 00:04:04,660
just put them together.

87
00:04:04,660 --> 00:04:07,080
I'd like to get parts out of them.

88
00:04:07,080 --> 00:04:09,610
So that leads to the interesting question of how do

89
00:04:09,610 --> 00:04:13,390
I get out elements of a compound object like a string.

90
00:04:13,390 --> 00:04:16,230
And here I want to show two examples.

91
00:04:16,230 --> 00:04:18,625
The first one is we can do what's called the indexing.

92
00:04:18,625 --> 00:04:21,060
And let me show you an instance of this.

93
00:04:21,060 --> 00:04:23,730
If I give the string 'abc'.

94
00:04:23,730 --> 00:04:26,440
Notice the single quotes around it so that is a string.

95
00:04:26,440 --> 00:04:30,420
And in square brackets are braces after it I give it an

96
00:04:30,420 --> 00:04:35,120
integer, like 0, it's going to give me out the element of the

97
00:04:35,120 --> 00:04:38,010
string corresponding to that index.

98
00:04:38,010 --> 00:04:39,310
Now how does it do this?

99
00:04:39,310 --> 00:04:40,350
Well it starts--

100
00:04:40,350 --> 00:04:42,130
well, if you want to think of it this way of

101
00:04:42,130 --> 00:04:44,280
counting from 0.

102
00:04:44,280 --> 00:04:46,130
So there's the string.

103
00:04:46,130 --> 00:04:48,610
The zeroth element is that one.

104
00:04:48,610 --> 00:04:51,000
And it will return that value.

105
00:04:51,000 --> 00:04:54,310
Similarly if I say from the string 'abc' give me the

106
00:04:54,310 --> 00:04:58,710
second element it starts at 0,1,2

107
00:04:58,710 --> 00:05:00,370
there's the second element.

108
00:05:00,370 --> 00:05:04,540
And it returns that string.

109
00:05:04,540 --> 00:05:06,440
Now you have to be careful.

110
00:05:06,440 --> 00:05:08,240
If I ask for the third element.

111
00:05:08,240 --> 00:05:10,380
Remember, I start counting at 0.

112
00:05:10,380 --> 00:05:12,720
There's 0, 1, 2.

113
00:05:12,720 --> 00:05:15,020
The third element, oh, there isn't one.

114
00:05:15,020 --> 00:05:17,150
And we get out an error.

115
00:05:17,150 --> 00:05:18,340
And we can seen this over here.

116
00:05:18,340 --> 00:05:22,840
If I, for example, just type it into Python.

117
00:05:22,840 --> 00:05:26,150
I can say give me the string 'abc.' And I'll take, in this

118
00:05:26,150 --> 00:05:28,202
case, the first element.

119
00:05:28,202 --> 00:05:30,420
And that will give me b.

120
00:05:30,420 --> 00:05:33,450
Because I start at 0 and go to 1.

121
00:05:33,450 --> 00:05:37,240
Now I can also though go backwards.

122
00:05:37,240 --> 00:05:40,300
So if I have a string 'abc' and I give it in square

123
00:05:40,300 --> 00:05:44,760
brackets or braces a negative number, it basically starts at

124
00:05:44,760 --> 00:05:50,440
0 and then counts backwards to minus 1 and then to minus 2.

125
00:05:50,440 --> 00:05:53,540
So that minus 1 index will return as the c.

126
00:05:53,540 --> 00:05:57,260
So it basically starts at the back end and counts backward.

127
00:05:57,260 --> 00:06:00,390
So we get out components of strings which is good.

128
00:06:00,390 --> 00:06:02,500
Now sometimes we'll want to get out not just a single

129
00:06:02,500 --> 00:06:05,930
element, we'll want to get out a substring of a string.

130
00:06:05,930 --> 00:06:09,340
And for that we have a technique called slicing.

131
00:06:09,340 --> 00:06:14,370
So we have a string called s, then this expression here

132
00:06:14,370 --> 00:06:17,250
where we have two expressions, a start and an end that are

133
00:06:17,250 --> 00:06:20,310
both integers or their values are integers that denotes the

134
00:06:20,310 --> 00:06:25,570
substring that starts at the index pointed to by start and

135
00:06:25,570 --> 00:06:29,950
stops just before the index pointed to by end.

136
00:06:29,950 --> 00:06:31,040
So just to see that.

137
00:06:31,040 --> 00:06:34,610
If I again take my string 'abc' and I say give me

138
00:06:34,610 --> 00:06:37,840
everything starting at one and stopping before the third

139
00:06:37,840 --> 00:06:42,420
index it returns for me the string bc.

140
00:06:42,420 --> 00:06:44,020
We're going to come back to doing things with strings

141
00:06:44,020 --> 00:06:47,030
later on, but we wanted to let you see that given compound or

142
00:06:47,030 --> 00:06:50,710
non-scalar objects like strings, not only can we

143
00:06:50,710 --> 00:06:53,500
combine together but we can also get out pieces of them.

144
00:06:53,500 --> 00:06:56,570
Either individual elements or subcomponents of them.

145
00:06:56,570 --> 00:06:58,600
And we'll use that as we start doing more interesting

146
00:06:58,600 --> 00:06:59,850
things moving on.


